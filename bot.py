import asyncio
import json
import aiohttp
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup

API_URL = "https://stock-tracker-iota-steel.vercel.app/api/garden"
DATA_FILE = "bot_data.json"
POLL_INTERVALS = {
    "SEEDS": 5 * 60,
    "GEAR": 5 * 60,
    "EGG":  30 * 60,
}

ITEM_CATEGORIES = {
    'SEEDS': [
        'Carrot', 'Strawberry', 'Blueberry', 'Orange Tulip', 'Tomato',
        'Corn', 'Daffodil', 'Watermelon', 'Pumpkin', 'Apple', 'Bamboo',
        'Coconut', 'Cactus', 'Dragon Fruit', 'Mango', 'Grape', 'Mushroom', 'Pepper'
    ],
    'GEAR': [
        'Watering Can', 'Trowel', 'Basic Sprinkler', 'Advanced Sprinkler',
        'Godly Sprinkler', 'Lightning Rod', 'Master Sprinkler'
    ],
    'EGG': [
        'Common Egg', 'Uncommon Egg', 'Rare Egg', 'Legendary Egg', 'Bug Egg'
    ]
}

bot = Bot(token="YOUR_TOKEN_HERE")
dp = Dispatcher(bot)

# --- –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è JSON-–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ---
def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {"users": {}, "last_stock": {}}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data_store = load_data()

# --- –ú–µ–Ω—é ---
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add("üîç –ü–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å—Ç–æ–∫ –∑–∞—Ä–∞–∑")
main_kb.add("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ—ó—Ç–∏ —Ç—Ä–µ–∫—ñ–Ω–≥", "üö´ –£–≤—ñ–º–∫–Ω—É—Ç–∏/–í–∏–º–∫–Ω—É—Ç–∏ —Ç—Ä–µ–∫—ñ–Ω–≥")

back_button = KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
refresh_button = KeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏")

def get_stock_markup():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for sec in ["GEAR STOCK", "EGG STOCK", "SEEDS STOCK"]:
        kb.add(sec)
    kb.add(back_button, refresh_button)
    return kb

def get_tracking_markup(category, user_prefs):
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for item in ITEM_CATEGORIES[category]:
        symbol = "‚úÖ" if user_prefs.get(category, {}).get(item) else "‚ùå"
        kb.insert(f"{symbol} {item}")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

# --- API Fetch ---
async def fetch_stock():
    async with aiohttp.ClientSession() as session:
        async with session.get(API_URL) as resp:
            return await resp.json()

# --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è ---
async def check_updates_for(section):
    while True:
        payload = await fetch_stock()
        new_data = next(sec for sec in payload["data"] if sec["section"].startswith(section))
        prev_data = data_store["last_stock"].get(section)

        if prev_data != new_data["items"]:
            # —Å–ø—Ä–∞–≤–∂–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            data_store["last_stock"][section] = new_data["items"]
            save_data(data_store)

            # —Ä–æ–∑—ñ—Å–ª–∞—Ç–∏ —é–∑–µ—Ä–∞–º
            for user_id, prefs in data_store["users"].items():
                if prefs.get("enabled") and prefs.get(section):
                    for it in new_data["items"]:
                        name, qty = it["name"], it["quantity"]
                        if prefs[section].get(name):
                            await bot.send_message(
                                user_id,
                                f"‚úÖ **{name}** –≤ {section.split()[0]} —Å—Ç–æ–∫—É: {qty}",
                                parse_mode="Markdown"
                            )
        await asyncio.sleep(POLL_INTERVALS[section])

# --- –•–µ–Ω–¥–ª–µ—Ä–∏ ---
@dp.message_handler(commands=["start"])
async def cmd_start(msg: types.Message):
    uid = str(msg.from_user.id)
    if uid not in data_store["users"]:
        data_store["users"][uid] = {"enabled": True}
        save_data(data_store)
    await msg.answer("–í—ñ—Ç–∞—é! –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=main_kb)

@dp.message_handler(commands=["status"])
async def cmd_status(msg: types.Message):
    last = data_store.get("last_stock", {})
    if not last:
        await msg.answer("–©–µ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Å—Ç–æ–∫—É.")
    else:
        txt = "\n".join(
            f"{sec}: {len(items)} –ø–æ–∑–∏—Ü—ñ–π (–æ—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –ø–∞–º'—è—Ç—ñ)"
            for sec, items in last.items()
        )
        await msg.answer(txt)

@dp.message_handler(lambda m: m.text == "üîç –ü–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å—Ç–æ–∫ –∑–∞—Ä–∞–∑")
async def show_stock(msg: types.Message):
    payload = await fetch_stock()
    if payload["data"] == list(map(lambda x: {"section": x["section"], "items": data_store["last_stock"].get(x["section"].split()[0], [])}, payload["data"])):
        await msg.answer(f"–°—Ç–æ–∫ —â–µ –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ (–æ—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {payload['timestamp']})")
    else:
        txt = []
        for sec in payload["data"]:
            txt.append(f"üì¶ *{sec['section']}*:\n" +
                       "\n".join(f"- {it['name']}: {it['quantity']}" for it in sec["items"]))
        await msg.answer("\n\n".join(txt), parse_mode="Markdown")

@dp.message_handler(lambda m: m.text == "üö´ –£–≤—ñ–º–∫–Ω—É—Ç–∏/–í–∏–º–∫–Ω—É—Ç–∏ —Ç—Ä–µ–∫—ñ–Ω–≥")
async def toggle_all(msg: types.Message):
    uid = str(msg.from_user.id)
    user = data_store["users"][uid]
    user["enabled"] = not user.get("enabled", True)
    save_data(data_store)
    status = "–≤–≤—ñ–º–∫–Ω–µ–Ω–æ" if user["enabled"] else "–≤–∏–º–∫–Ω–µ–Ω–æ"
    await msg.answer(f"–¢—Ä–µ–∫—ñ–Ω–≥ {status}.", reply_markup=main_kb)

@dp.message_handler(lambda m: m.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ—ó—Ç–∏ —Ç—Ä–µ–∫—ñ–Ω–≥")
async def config_start(msg: types.Message):
    uid = str(msg.from_user.id)
    data_store["users"].setdefault(uid, {"enabled": True})
    save_data(data_store)
    # –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –ø–µ—Ä—à–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=get_tracking_markup("SEEDS", data_store["users"][uid]))

@dp.message_handler(lambda m: m.text and (m.text.startswith("‚úÖ") or m.text.startswith("‚ùå")))
async def config_toggle_item(msg: types.Message):
    uid = str(msg.from_user.id)
    text = msg.text[2:].strip()
    # –í–∏–∑–Ω–∞—á–∏–º–æ —Å–µ–∫—Ü—ñ—é –∑–∞ –∞–∫—Ç–∏–≤–Ω–∏–º –º–µ–Ω—é (–º–æ–∂–Ω–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –≤ —Å–µ—Å—ñ—ó; –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ ‚Äî –∑–∞ —Å–ø–∏—Å–∫–æ–º)
    for cat in ITEM_CATEGORIES:
        if text in ITEM_CATEGORIES[cat]:
            prefs = data_store["users"][uid].setdefault(cat, {})
            prefs[text] = not prefs.get(text, False)
            save_data(data_store)
            await msg.answer(f"{'–í—ñ–¥—Å—Ç–µ–∂—É—î—Ç—å—Å—è' if prefs[text] else '–í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ'}: {text}",
                             reply_markup=get_tracking_markup(cat, data_store["users"][uid]))
            return

@dp.message_handler(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(msg: types.Message):
    await msg.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_kb)

# --- –°—Ç–∞—Ä—Ç —Ñ–æ–Ω–æ–≤–∏—Ö —Ç–∞—Å–∫—ñ–≤ ---
async def on_startup(dp):
    for section in POLL_INTERVALS:
        asyncio.create_task(check_updates_for(section))

if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup)